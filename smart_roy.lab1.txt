Roy Smart
CSCI 305 Concepts of Programming Languages
Lab 1
February 16, 2015

Question 1: Which word most often follows the word “happy”?
	The word "birthday" most often follows "happy".


Question 2: Which word most often follows the word "sad"?
	The word "song" most often follows the word "sad".


Question 3: How many different (unique) words follow the word "computer"?
	58 different words follow the word "computer".


Question 4: Which word most often follows the word "computer"?
	The word "love" most often follows the word "computer".


Question 5: How many times does this word follow "computer"?
	The word "love" follows "computer" 13 times.


Question 6: Using the starting word "happy", what song title do you get?
	happy birthday song for the world is a little girl in the world is a little girl in the world is


Question 7: Using the starting word “sad”, what song title do you get?
	sad song for the world is a little girl in the world is a little girl in the world is a


Question 8: Using the starting word “hey”, what song title do you get?
	hey hey hey hey hey hey hey hey hey hey hey hey hey hey hey hey hey hey hey hey hey


Question 9: Using the starting word “little”, what song title do you get?
	little girl in the world is a little girl in the world is a little girl in the world is a


Question 10: Try a few other words. What problem(s) do you see? Which phrase do you most often find recurring in 
these titles?
	The output of the program for a few other words is:

		Enter a word [Enter 'q' to quit]: best
		best of the world is a little girl in the world is a little girl in the world is a little, 20 words
		Enter a word [Enter 'q' to quit]: great
		great big city of the world is a little girl in the world is a little girl in the world is, 20 words
		Enter a word [Enter 'q' to quit]: while
		while you are you are you are you are you are you are you are you are you are you are, 20 words
		Enter a word [Enter 'q' to quit]: oh
		oh my heart of the world is a little girl in the world is a little girl in the world is, 20 words
		Enter a word [Enter 'q' to quit]: final
		final countdown to the world is a little girl in the world is a little girl in the world is a, 20 words

	The main problem with the average song title is that it gets into infinite loops. A word will link through one 
	or more other words back to itself, creating a song title that would never end if it weren't for the twenty
	word limit. The most common loop starts with the word "the", producing the endless title: "the world is a 
	little girl in the world...".


Question 10 (the second): Using the starting word “amore”, what song title do you get?
	amore mio babbino caro nome na na na na na na na na na na na na na na na na


Question 11: Using the starting word “love”, what song title do you get?
	love you are you are you are you are you are you are you are you are you are you are


Question 12: Using the starting word “little”, what song title do you get?
	little girl like you are you are you are you are you are you are you are you are you are


Question 13: (Bad luck I assume?)


Question 14: Explain why so many of the titles devolve into repeating patterns.
	Many of the titles devolve into repeating patterns because the same word often precedes and follows the next
	word in the bigram. If a word links to itself through one or more bigrams, it will form a repeating pattern.
	(From the text of Lab 1, it implies that we should describe a fix for this problem. The best fix would involve 
	implementing some sort of memory that would know if a word already has an occurance in the average song title.
	If the word already exists, we would select the next most common word from the bigram double hash table.)


Question 15: Try several words. Find a song title that terminates in less than 20 words. Could you find one? If so,
which song title did you find? If not, why not?
	A song title that ends in less than 20 words is one that starts with "brush". It produces only a two word song
	title: "brush arbors".


Question 16: Describe in one to two paragraphs your extension and how it fixed the repeating phrase/word problem.
	To fix the repeating phrase problem, I prevented the mcw() subroutine from returning words that it had already 
	returned in this title. This was achieved through the use of a hash table data structure. If a word was used, it
	was placed into the data structure. Later the mcw() subroutine would check to see if a word key was defined in the
	hash table in order to set that word as a candidate for the most common word. If a word was found to be already in 
	the title, the program just skipped that word in its consideration for the most common word.
		The fix was able to successfully terminate the average song title, but the titles were usually pretty long
	(sometimes 60-200 words). I'm not really sure how to fix this problem, other than to possibly identify more Stop 
	Words to eliminate some more common words that end up in similar phrases.


Question 17: Using the starting word “montana”, what song title do you get?
	montana sacra nova scotia


Question 18: Using the starting word “bob”, what song title do you get?
	bob marley vs heroin revisited part 2 me down south side story ends burning up your love you are my heart is it all 
	i don't know what do that way home again kathleen mavourneen


Question 19: Using the starting word “bob’ again, do you get the same title? If no, what do you get? Try it a third 
time. Explain why the title might differ each time.
	The title generated using the word "bob" is not the same each time. This is because of the entropy introduced
	by randomly selecting the Most Common Word in the event of a tie in bigram frequency. So if two words occur the
	same amount, the program has a 50/50 chance of selecting either of them.


Question 20: Share your favorite song title that you have found.
	My favorite partial titles were: "my heart attack ships", "boom bap yo", "black magic carpet ride", and 
	"honky tonk train song".


Question 21: Name something you like about Perl. Explain.
	I like the simplicity of wrting programs in perl. Since perl borrows a lot of ideas from c, it is easy to read if 
	you're used to using C-style programming languages like I am. Furthermore it makes things a lot easier than C, 
	automatically allocating memory for you, and providing advanced data types like the hash table (which was 
	especially useful in this lab). Finally, the documentation for perl is fairly complete online with lots of
	good examples and tutorials for learning.


Question 22: Name something you dislike about Perl. Explain.
	Initially I did not like that the compiler would not catch errors in the program for you, leaving you to die in
	your own self-pity. Then I found you can include the lines "use strict;" and "use warinings;" which made perl 
	act similar to a C-style compliler. Now I have no complaints.


Question 23: Did you enjoy this lab? Which aspects did you like and/or dislike?
	I definetly enjoyed the combined challenge of learning a new language by writing a fairly complicated program
	that I hadn't already done. I enjoyed learning all about regular expressions and the powerful string 
	processing abilities of perl. I did not like how difficult it was to ascertain that the program was working
	correctly. It would have been really useful to have more self-checks to help ensure the proper operation of
	the program.


Question 24: Approximately how many hours did you spend on this lab?
	Don't even ask. At least 15 hours.


Question 25: Do you think you will use Perl again? For which type(s) of project(s)?
	I would definetly consider perl for any type of string processing application.
